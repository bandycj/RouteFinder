/*
 * jQuery Mobile Framework : plugin to provide a date and time picker.
 * Copyright (c) JTSage
 * CC 3.0 Attribution.  May be relicensed without permission/notification.
 * https://github.com/jtsage/jquery-mobile-datebox
 */
(function (a) {
    a.extend(a.mobile.datebox.prototype.options, {themeButton:"a", themeInput:"e", useSetButton:true, validHours:false, repButton:true});
    a.extend(a.mobile.datebox.prototype, {_dbox_run:function () {
        var b = this;
        b.drag.didRun = true;
        b._offset(b.drag.target[0], b.drag.target[1]);
        b.runButton = setTimeout(function () {
            b._dbox_run()
        }, 150)
    }, _dbox_vhour:function (g) {
        var b = this, f = this.options, e, d = [25, 0], c = [25, 0];
        if (f.validHours === false) {
            return true
        }
        if (a.inArray(b.theDate.getHours(), f.validHours) > -1) {
            return true
        }
        e = b.theDate.getHours();
        a.each(f.validHours, function () {
            if (((e < this) ? 1 : -1) === g) {
                if (d[0] > Math.abs(this - e)) {
                    d = [Math.abs(this - e), parseInt(this, 10)]
                }
            } else {
                if (c[0] > Math.abs(this - e)) {
                    c = [Math.abs(this - e), parseInt(this, 10)]
                }
            }
        });
        if (d[1] !== 0) {
            b.theDate.setHours(d[1])
        } else {
            b.theDate.setHours(c[1])
        }
    }, _dbox_enter:function (c) {
        var b = this;
        if (c.jqmData("field") === "M" && a.inArray(c.val(), b.__("monthsOfYearShort")) > -1) {
            b.theDate.setMonth(a.inArray(c.val(), b.__("monthsOfYearShort")))
        }
        if (c.val() !== "" && c.val().toString().search(/^[0-9]+$/) === 0) {
            switch (c.jqmData("field")) {
                case"y":
                    b.theDate.setFullYear(parseInt(c.val(), 10));
                    break;
                case"m":
                    b.theDate.setMonth(parseInt(c.val(), 10) - 1);
                    break;
                case"d":
                    b.theDate.setDate(parseInt(c.val(), 10));
                    break;
                case"h":
                    b.theDate.setHours(parseInt(c.val(), 10));
                    break;
                case"i":
                    b.theDate.setMinutes(parseInt(c.val(), 10));
                    break
            }
        }
        b.refresh()
    }});
    a.extend(a.mobile.datebox.prototype._build, {timebox:function () {
        this._build.datebox.apply(this, [])
    }, datebox:function () {
        var r = this, f = this.options, j, p, k, m = "ui-datebox-", n = a("<div>", {"class":m + "controls"}), c = n.clone(), g = n.clone(), h = n.clone(), e = a("<input type='" + r.inputType + "' />").addClass("ui-input-text ui-corner-all ui-shadow-inset " + m + "input ui-body-" + f.themeInput), q = (a.browser.msie ? e.clone() : e.clone().attr("type", "text")), l = a("<div></div>"), b = {theme:f.themeButton, icon:"plus", iconpos:"bottom", corners:true, shadow:true}, d = a.extend({}, b, {icon:"minus", iconpos:"top"});
        if (typeof r.d.intHTML !== "boolean") {
            r.d.intHTML.empty().remove()
        }
        r.d.headerText = ((r._grabLabel() !== false) ? r._grabLabel() : ((f.mode === "datebox") ? r.__("titleDateDialogLabel") : r.__("titleTimeDialogLabel")));
        r.d.intHTML = a("<span>");
        r.fldOrder = ((f.mode === "datebox") ? r.__("dateFieldOrder") : r.__("timeFieldOrder"));
        r._check();
        r._minStepFix();
        r._dbox_vhour(typeof r._dbox_delta !== "undefined" ? r._dbox_delta : 1);
        if (f.mode === "datebox") {
            a('<div class="' + m + 'header"><h4>' + r._formatter(r.__("headerFormat"), r.theDate) + "</h4></div>").appendTo(r.d.intHTML)
        }
        for (j = 0; j <= r.fldOrder.length; j++) {
            switch (r.fldOrder[j]) {
                case"y":
                case"m":
                case"d":
                case"h":
                    r._makeEl(e, {attr:{field:r.fldOrder[j], amount:1}}).appendTo(g);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(b).appendTo(c);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(d).appendTo(h);
                    break;
                case"a":
                    if (r.__("timeFormat") === 12) {
                        r._makeEl(q, {attr:{field:r.fldOrder[j], amount:1}}).appendTo(g);
                        r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(b).appendTo(c);
                        r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(d).appendTo(h)
                    }
                    break;
                case"M":
                    r._makeEl(q, {attr:{field:r.fldOrder[j], amount:1}}).appendTo(g);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(b).appendTo(c);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:1}}).buttonMarkup(d).appendTo(h);
                    break;
                case"i":
                    r._makeEl(e, {attr:{field:r.fldOrder[j], amount:f.minuteStep}}).appendTo(g);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:f.minuteStep}}).buttonMarkup(b).appendTo(c);
                    r._makeEl(l, {attr:{field:r.fldOrder[j], amount:f.minuteStep}}).buttonMarkup(d).appendTo(h);
                    break
            }
        }
        c.appendTo(r.d.intHTML);
        g.appendTo(r.d.intHTML);
        h.appendTo(r.d.intHTML);
        g.find("input").each(function () {
            switch (a(this).jqmData("field")) {
                case"y":
                    a(this).val(r.theDate.getFullYear());
                    break;
                case"m":
                    a(this).val(r.theDate.getMonth() + 1);
                    break;
                case"d":
                    a(this).val(r.theDate.getDate());
                    break;
                case"h":
                    if (r.__("timeFormat") === 12) {
                        if (r.theDate.getHours() > 12) {
                            a(this).val(r.theDate.getHours() - 12);
                            break
                        } else {
                            if (r.theDate.getHours() === 0) {
                                a(this).val(12);
                                break
                            }
                        }
                    }
                    a(this).val(r.theDate.getHours());
                    break;
                case"i":
                    a(this).val(r._zPad(r.theDate.getMinutes()));
                    break;
                case"M":
                    a(this).val(r.__("monthsOfYearShort")[r.theDate.getMonth()]);
                    break;
                case"a":
                    a(this).val((r.theDate.getHours() > 11) ? r.__("meridiem")[1] : r.__("meridiem")[0]);
                    break
            }
        });
        if (r.dateOK !== true) {
            g.find("input").addClass(m + "griddate-disable")
        } else {
            g.find("." + m + "griddate-disable").removeClass(m + "griddate-disable")
        }
        if (f.useSetButton || f.useClearButton) {
            p = a("<div>", {"class":m + "controls"});
            if (f.useSetButton) {
                a('<a href="#">' + ((f.mode === "datebox") ? r.__("setDateButtonLabel") : r.__("setTimeButtonLabel")) + "</a>").appendTo(p).buttonMarkup({theme:f.theme, icon:"check", iconpos:"left", corners:true, shadow:true}).on(f.clickEvent, function (i) {
                    i.preventDefault();
                    if (r.dateOK === true) {
                        r.d.input.trigger("datebox", {method:"set", value:r._formatter(r.__fmt(), r.theDate), date:r.theDate});
                        r.d.input.trigger("datebox", {method:"close"})
                    }
                })
            }
            if (f.useClearButton) {
                a('<a href="#">' + r.__("clearButton") + "</a>").appendTo(p).buttonMarkup({theme:f.theme, icon:"delete", iconpos:"left", corners:true, shadow:true}).on(f.clickEvent, function (i) {
                    i.preventDefault();
                    r.d.input.val("");
                    r.d.input.trigger("datebox", {method:"clear"});
                    r.d.input.trigger("datebox", {method:"close"})
                })
            }
            if (f.useCollapsedBut) {
                p.addClass("ui-datebox-collapse")
            }
            p.appendTo(r.d.intHTML)
        }
        if (f.repButton === false) {
            c.on(f.clickEvent, "div", function (i) {
                i.preventDefault();
                r._dbox_delta = 1;
                r._offset(a(this).jqmData("field"), a(this).jqmData("amount"))
            });
            h.on(f.clickEvent, "div", function (i) {
                i.preventDefault();
                r._dbox_delta = -1;
                r._offset(a(this).jqmData("field"), a(this).jqmData("amount") * -1)
            })
        }
        g.on("change", "input", function () {
            r._dbox_enter(a(this))
        });
        if (r.wheelExists) {
            g.on("mousewheel", "input", function (i, o) {
                i.preventDefault();
                r._dbox_delta = o < 0 ? -1 : 1;
                r._offset(a(this).jqmData("field"), ((o < 0) ? -1 : 1) * a(this).jqmData("amount"))
            })
        }
        if (f.repButton === true) {
            c.on(r.drag.eStart, "div", function (i) {
                k = [a(this).jqmData("field"), a(this).jqmData("amount")];
                r.drag.move = true;
                r._dbox_delta = 1;
                r._offset(k[0], k[1]);
                if (!r.runButton) {
                    r.drag.target = k;
                    r.runButton = setTimeout(function () {
                        r._dbox_run()
                    }, 500)
                }
            });
            h.on(r.drag.eStart, "div", function (i) {
                k = [a(this).jqmData("field"), a(this).jqmData("amount") * -1];
                r.drag.move = true;
                r._dbox_delta = -1;
                r._offset(k[0], k[1]);
                if (!r.runButton) {
                    r.drag.target = k;
                    r.runButton = setTimeout(function () {
                        r._dbox_run()
                    }, 500)
                }
            })
        }
    }});
    a.extend(a.mobile.datebox.prototype._drag, {timebox:function () {
        this._drag.datebox.apply(this)
    }, datebox:function () {
        var b = this, d = this.options, c = this.drag;
        if (d.repButton === true) {
            a(document).on(c.eEndA, function (f) {
                if (c.move) {
                    f.preventDefault();
                    clearTimeout(b.runButton);
                    b.runButton = false;
                    c.move = false
                }
            })
        }
    }})
})(jQuery);